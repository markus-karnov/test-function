# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and publish function TestOutboundIp

env:
  AZURE_FUNCTIONAPP_NAME_DEV: test-function-markus  
  AZURE_FUNCTIONAPP_NAME_PROD: test-function-markus  # should be different from dev!
  
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'           # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '6.0.x'                       # set this to the dotnet version to use
  PROJECT_PATH: '.\TestOutboundIp\TestOutboundIp.csproj'
  ARTIFACT_NAME: "test-function"
on:
  push:
    branches:
      - "master"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  job_CI:
  
    runs-on: windows-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@master

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

#    - name: 'Resolve Project Dependencies Using Dotnet'
#      shell: pwsh
#      run: |
#        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
#        dotnet build --configuration Release --output ./output
#        popd

    - name: Publish
      shell: pwsh
      run: |
        dotnet restore
        dotnet build --configuration Release
        dotnet publish ${{ env.PROJECT_PATH }} -c Release -o './output/${{ env.ARTIFACT_NAME }}'

    - name: Store artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: './output/${{ env.ARTIFACT_NAME }}'

  job_CD_dev:
    needs: job_CI
    runs-on: windows-latest
    environment: dev
    steps: 

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.AZURE_ARTIFACT_NAME }}
        path: './output/${{ env.ARTIFACT_NAME }}'

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_DEV }}
        package: './output/${{ env.ARTIFACT_NAME }}'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    - name: 'Azure login'
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Azure keyvault'
      uses: Azure/get-keyvault-secrets@v1
      with: 
        keyvault: "kv-test-markus"
        secrets: 'TestSecret1, TestSecret2'
      id: getKeyVaultSecrets

    - name: 'Set Functions Config'
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_DEV }}
        app-settings-json: |
         [
             {
                 "name": "TEST_CONFIG_1",
                 "value": "${{ steps.getKeyVaultSecrets.outputs.TestSecret1 }}",
                 "slotSetting": false
             },
             {
                 "name": "TEST_CONFIG_2",
                 "value": "${{ steps.getKeyVaultSecrets.outputs.TestSecret2 }}",
                 "slotSetting": false
             }
         ]
        
      id: settings

  job_CD_prod:
    needs: job_CD_dev
    runs-on: windows-latest
    environment: prod
    steps: 

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: './output/${{ env.ARTIFACT_NAME }}'

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_PROD }}
        package: './output/${{ env.ARTIFACT_NAME }}'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    - name: 'Azure login'
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Azure keyvault'
      uses: Azure/get-keyvault-secrets@v1
      with: 
        keyvault: "kv-test-markus"
        secrets: 'TestSecret1, TestSecret2'
      id: getKeyVaultSecrets
      
    - name: 'Set Functions Config'
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME_PROD }}
        app-settings-json: |
         [
             {
                 "name": "TEST_CONFIG_1",
                 "value": "${{ steps.getKeyVaultSecrets.outputs.TestSecret1 }}",
                 "slotSetting": false
             },
             {
                 "name": "TEST_CONFIG_2",
                 "value": "${{ steps.getKeyVaultSecrets.outputs.TestSecret2 }}",
                 "slotSetting": false
             }
         ]
        
      id: settings
